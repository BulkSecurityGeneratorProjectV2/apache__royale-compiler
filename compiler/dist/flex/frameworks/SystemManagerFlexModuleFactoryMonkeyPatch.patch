Index: frameworks/projects/framework/src/mx/core/FlexModuleFactory.as
===================================================================
--- frameworks/projects/framework/src/mx/core/FlexModuleFactory.as	(revision 22498)
+++ frameworks/projects/framework/src/mx/core/FlexModuleFactory.as	(working copy)
@@ -21,6 +21,7 @@
 import flash.events.SecurityErrorEvent;
 import flash.events.TimerEvent;
 import flash.system.ApplicationDomain;
+import flash.system.Security;
 import flash.text.TextField;
 import flash.text.TextFieldAutoSize;
 import flash.utils.Dictionary;
@@ -151,6 +152,16 @@
 	//
 	//--------------------------------------------------------------------------
 
+    /**
+     *  @private
+     */
+    private var _allowDomainParameters:Vector.<Array>;
+    
+    /**
+     *  @private
+     */
+    private var _allowInsecureDomainParameters:Vector.<Array>;
+    
   	/**
 	 *  @private
 	 */
@@ -293,13 +304,19 @@
     //----------------------------------
     
     /**
+     *  @private
+     */
+    private var _preloadedRSLs:Dictionary; // key: LoaderInfo, value: Vector.<RSLData>
+    
+    /**
      *  @inheritDoc 
      *  
      */
     public function  get preloadedRSLs():Dictionary
     {
-        // Overridden by compiler generate code.
-        return null;                
+        if (_preloadedRSLs == null)
+            _preloadedRSLs = new Dictionary(true);
+        return _preloadedRSLs;
     }
     
     //--------------------------------------------------------------------------
@@ -371,25 +388,49 @@
     }
 
     /**
-     *  Calls Security.allowDomain() for the SWF associated with this FlexModuleFactory.
-     *  plus all the SWFs assocatiated with RSLs preloaded by this FlexModuleFactory.
-     * 
+     *  @inheritDoc
      */  
     public function allowDomain(... domains):void
     {
-        // Overridden by compiler generated code.
+        callInContext(Security.allowDomain, null, domains, false);
+        
+        for (var loaderInfo:Object in _preloadedRSLs)
+        {
+            if (loaderInfo.content && ("allowDomainInRSL" in loaderInfo.content))
+                loaderInfo.content["allowDomainInRSL"].apply(null, domains);
+        }
+        
+        if (!_allowDomainParameters)
+            _allowDomainParameters = new Vector.<Array>();
+        _allowDomainParameters.push(domains);
+        
+        // Run our handler before the default handlers so the RSL is trusted before the
+        // default handlers run.
+        addEventListener(RSLEvent.RSL_ADD_PRELOADED, addPreloadedRSLHandler, false, 50);
     }
     
     /**
-     *  Calls Security.allowInsecureDomain() for the SWF associated with this FlexModuleFactory
-     *  plus all the SWFs assocatiated with RSLs preloaded by this FlexModuleFactory.
-     * 
+     *  @inheritDoc
      */  
     public function allowInsecureDomain(... domains):void
     {
-        // Overridden by compiler generated code.
+        callInContext(Security.allowInsecureDomain, null, domains, false);
+        
+        for (var loaderInfo:Object in _preloadedRSLs)
+        {
+            if (loaderInfo.content && ("allowInsecureDomainInRSL" in loaderInfo.content))
+                loaderInfo.content["allowInsecureDomainInRSL"].apply(null, domains);
+        }
+        
+        if (!_allowInsecureDomainParameters)
+            _allowInsecureDomainParameters = new Vector.<Array>();
+        _allowInsecureDomainParameters.push(domains);
+        
+        // Run our handler before the default handlers so the RSL is trusted before the
+        // default handlers run.
+        addEventListener(RSLEvent.RSL_ADD_PRELOADED, addPreloadedRSLHandler, false, 50);
     }
-    
+
     /**
      * @private
      *  A map of fully-qualified interface names,
@@ -856,6 +897,41 @@
         	nextFrameTimer.reset();
         }
     }
+    
+    /**
+     *  @private
+     * 
+     *  Allow newly loaded RSLs to be accessed by the same domains that have
+     *  been allowed by previously loaded RSLs. If a developer
+     *  does not want this behavior then they can set allowDomainsInNewRSLs
+     *  to false for Security.AllowDomain() calls and 
+     *  allowInsecureDomainsInNewRSLs for Security.AllowInsecureDomain().  
+     */
+    private function addPreloadedRSLHandler(event:RSLEvent):void
+    {
+        var loaderInfo:LoaderInfo = event.loaderInfo;
+        if (!loaderInfo || !loaderInfo.content)
+            return;
+        var domains:Array
+        if (allowDomainsInNewRSLs && _allowDomainParameters)
+        {
+            for each (domains in _allowDomainParameters)
+            {
+                if ("allowDomainInRSL" in loaderInfo.content)
+                    loaderInfo.content["allowDomainInRSL"].apply(null, domains);
+            }
+        }
+        
+        if (allowInsecureDomainsInNewRSLs && _allowInsecureDomainParameters)
+        {
+            for each (domains in _allowInsecureDomainParameters)
+            {
+                if ("allowInsecureDomainInRSL" in loaderInfo.content)
+                    loaderInfo.content["allowInsecureDomainInRSL"].apply(null, domains);
+            }
+        }
+    }
+    
 }
 
 }
Index: frameworks/projects/framework/src/mx/managers/SystemManager.as
===================================================================
--- frameworks/projects/framework/src/mx/managers/SystemManager.as	(revision 22498)
+++ frameworks/projects/framework/src/mx/managers/SystemManager.as	(working copy)
@@ -32,6 +32,7 @@
 import flash.geom.Point;
 import flash.geom.Rectangle;
 import flash.system.ApplicationDomain;
+import flash.system.Security;
 import flash.text.Font;
 import flash.text.TextFormat;
 import flash.ui.Keyboard;
@@ -300,6 +301,16 @@
 
     /**
      *  @private
+     */
+    private var _allowDomainParameters:Vector.<Array>;
+    
+    /**
+     *  @private
+     */
+    private var _allowInsecureDomainParameters:Vector.<Array>;
+
+    /**
+     *  @private
      *  Whether we are in the top-level list or not;
      *  top-level means we are the highest level SystemManager
      *  for this stage.
@@ -459,7 +470,7 @@
      *  Array of RSLData.
      */ 
     private var rslDataList:Array
-    
+        
     //--------------------------------------------------------------------------
     //
     //  Overridden properties: DisplayObject
@@ -1132,14 +1143,24 @@
     //  preloadedRSLs
     //----------------------------------
     
+    // Link FlexModuleFactory into frame1 so its monkey patch
+    // will be preserved when RSLs are used.
+    import mx.core.FlexModuleFactory; FlexModuleFactory;
+    
     /**
+     *  @private
+     */
+    private var _preloadedRSLs:Dictionary; // key: LoaderInfo, value: Vector.<RSLData>
+    
+    /**
      *  @inheritDoc 
      *  
      */
     public function  get preloadedRSLs():Dictionary
     {
-        // Overridden by compiler generate code.
-        return null;                
+        if (_preloadedRSLs == null)
+            _preloadedRSLs = new Dictionary(true);
+        return _preloadedRSLs;
     }
     
     /**
@@ -2218,23 +2239,47 @@
     //--------------------------------------------------------------------------
     
     /**
-     *  Calls Security.allowDomain() for the SWF associated with this SystemManager
-     *  plus all the SWFs assocatiated with RSLs preloaded by this SystemManager.
-     * 
+     *  @inheritDoc
      */  
     public function allowDomain(... domains):void
     {
-        // Overridden by compiler generated code.
+        callInContext(Security.allowDomain, null, domains, false);
+        
+        for (var loaderInfo:Object in _preloadedRSLs)
+        {
+            if (loaderInfo.content && ("allowDomainInRSL" in loaderInfo.content))
+                loaderInfo.content["allowDomainInRSL"].apply(null, domains);
+        }
+        
+        if (!_allowDomainParameters)
+            _allowDomainParameters = new Vector.<Array>();
+        _allowDomainParameters.push(domains);
+        
+        // Run our handler before the default handlers so the RSL is trusted before the
+        // default handlers run.
+        addEventListener(RSLEvent.RSL_ADD_PRELOADED, addPreloadedRSLHandler, false, 50);
     }
     
     /**
-     *  Calls Security.allowInsecureDomain() for the SWF associated with this SystemManager
-     *  plus all the SWFs assocatiated with RSLs preloaded by this SystemManager.
-     * 
+     *  @inheritDoc
      */  
     public function allowInsecureDomain(... domains):void
     {
-        // Overridden by compiler generated code.
+        callInContext(Security.allowInsecureDomain, null, domains, false);
+        
+        for (var loaderInfo:Object in _preloadedRSLs)
+        {
+            if (loaderInfo.content && ("allowInsecureDomainInRSL" in loaderInfo.content))
+                loaderInfo.content["allowInsecureDomainInRSL"].apply(null, domains);
+        }
+        
+        if (!_allowInsecureDomainParameters)
+            _allowInsecureDomainParameters = new Vector.<Array>();
+        _allowInsecureDomainParameters.push(domains);
+        
+        // Run our handler before the default handlers so the RSL is trusted before the
+        // default handlers run.
+        addEventListener(RSLEvent.RSL_ADD_PRELOADED, addPreloadedRSLHandler, false, 50);
     }
 
     //--------------------------------------------------------------------------
@@ -3620,6 +3665,40 @@
         dispatchEvent(new SandboxMouseEvent(SandboxMouseEvent.MOUSE_UP_SOMEWHERE));
     }
 
+    /**
+     *  @private
+     * 
+     *  Allow newly loaded RSLs to be accessed by the same domains that have
+     *  been allowed by previously loaded RSLs. If a developer
+     *  does not want this behavior then they can set allowDomainsInNewRSLs
+     *  to false for Security.AllowDomain() calls and 
+     *  allowInsecureDomainsInNewRSLs for Security.AllowInsecureDomain().  
+     */
+    private function addPreloadedRSLHandler(event:RSLEvent):void
+    {
+        var loaderInfo:LoaderInfo = event.loaderInfo;
+        if (!loaderInfo || !loaderInfo.content)
+            return;
+        var domains:Array
+        if (allowDomainsInNewRSLs && _allowDomainParameters)
+        {
+            for each (domains in _allowDomainParameters)
+            {
+                if ("allowDomainInRSL" in loaderInfo.content)
+                    loaderInfo.content["allowDomainInRSL"].apply(null, domains);
+            }
+        }
+        
+        if (allowInsecureDomainsInNewRSLs && _allowInsecureDomainParameters)
+        {
+            for each (domains in _allowInsecureDomainParameters)
+            {
+                if ("allowInsecureDomainInRSL" in loaderInfo.content)
+                    loaderInfo.content["allowInsecureDomainInRSL"].apply(null, domains);
+            }
+        }
+    }
+    
 }
 
 }
